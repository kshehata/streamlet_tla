----------------------------- MODULE Blocks -----------------------------

EXTENDS Integers, FiniteSets

CONSTANT NewView, Prepare, PreCommit, Commit, Decide, Replicas, Null, QCThresh

ASSUME QCThresh \in Nat

(***************************************************************************)
(* Block Tree Types *)
(***************************************************************************)

BlockType == [ 
    \* Unique identifier for each block.
    id : Nat,
    \* Parents are referenced by their id as well.
    parent : Nat
]

GenesisBlock == [ id |-> 0, parent |-> 0 ]

CreateBlock(id, parent) == [ id |-> id, parent |-> parent.id ]

\* True if b1 extends b2 directly (i.e. with no other blocks in between)
DirectlyExtends(b1, b2) == b1.parent = b2.id

RECURSIVE BlockExtends(_, _, _)
BlockExtends(b1, b2, blocks) ==
    \/ DirectlyExtends(b1, b2)
    \/ (\E b3 \in blocks : /\ DirectlyExtends(b3, b2)
                           /\ BlockExtends(b1, b3, blocks))

(***************************************************************************)
(* Quorum Certificates (QC) *)
(***************************************************************************)

QCType == [
    \* Phase that generated QC
    type : {Prepare, PreCommit, Commit},
    \* View number that generated QC
    viewNum : Nat,
    \* Block for which QC applies
    block : BlockType
    \* No actual signature. Assume that if this gets created, it's valid.
]

GenesisQC(type) == [ type |-> type, viewNum |-> 0, block |-> GenesisBlock ]

CheckVotesForQC(votes) ==
    /\ LET x == CHOOSE v \in votes : TRUE IN
        /\ \A v \in votes : v.type = x.type /\ v.viewNum = x.viewNum
    /\ Cardinality({v.vote : v \in votes}) >= QCThresh
    \* TODO: Check block??
    \* or received ?

GenerateQC(votes) ==
    LET v == CHOOSE v \in votes : v.block # Null IN
    [ type |-> v.type, viewNum |-> v.viewNum, block |-> v.block ]


(***************************************************************************)
(* Messages *)
(***************************************************************************)

MessageType == [
    \* The phase the message belongs in
    type : {NewView, Prepare, PreCommit, Commit, Decide},
    \* The view number the message belongs to
    viewNum : Nat,
    \* The block under consideration
    block : BlockType \union {Null},
    \* Any justifying QC if applicable
    justify : QCType \union {Null},
    \* Vote represents a signature generated by a replica
    vote : Replicas,
    \* Intended recipient of a message
    dest : SUBSET(Replicas),
    \* Who has received the message
    received : SUBSET(Replicas)
]

CreateBroadcastMessage(type, vn, block, justify, sender) == [
    type |-> type,
    viewNum |-> vn,
    block |-> block,
    justify |-> justify,
    vote |-> sender,
    dest |-> Replicas,
    received |-> {sender}
]

CreateMessageTo(type, vn, block, justify, sender, dest) == [
    type |-> type,
    viewNum |-> vn,
    block |-> block,
    justify |-> justify,
    vote |-> sender,
    dest |-> {dest},
    received |-> {}
]

MessageReceived(msg) == msg.dest = msg.received

MarkMessageReceivedBy(msg, r) == [ msg EXCEPT !.received = msg.received \union {r} ]

\* Extract all of the votes received by the leader for a given phase
ReceivedVotes(Messages, type, vn, leader) == { m \in Messages : 
    /\ m.type = type
    /\ m.viewNum = vn
    /\ leader \in m.dest
    /\ leader \in m.received
}

=============================================================================
